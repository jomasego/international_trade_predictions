name: Deploy to Hugging Face Spaces

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SPACE_NAME: ${{ secrets.SPACE_NAME }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Hugging Face Hub
        run: pip install huggingface_hub
          
      - name: Deploy to Hugging Face Space using huggingface_hub
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          # Create a directory for the Space contents
          mkdir -p space_contents
          
          # Copy all necessary files to this directory
          cp spaces_app.py space_contents/app.py
          cp requirements-spaces.txt space_contents/requirements.txt
          cp Dockerfile space_contents/Dockerfile
          cp -r llm_assistant.py space_contents/
          cp README.md space_contents/README.md || echo "No README to copy"
          
          # Create necessary subdirectories
          mkdir -p space_contents/static space_contents/templates
          
          # Copy subdirectories if they exist
          if [ -d "static" ]; then
            cp -r static/* space_contents/static/ || echo "No static files to copy"
          fi
          
          if [ -d "templates" ]; then
            cp -r templates/* space_contents/templates/ || echo "No template files to copy"
          fi
          
          # Don't include secrets in files - we'll set them as Space secrets via the API later
          
          # Create or update the Space using huggingface_hub API
          python - <<EOF
          from huggingface_hub import HfApi, create_repo
          import os
          from pathlib import Path
          import time
          
          # Get environment variables
          token = os.environ.get('HF_TOKEN')
          space_name = os.environ.get('SPACE_NAME')
          repo_id = f"jomasego/{space_name}"
          
          # Initialize API
          api = HfApi(token=token)
          
          # Check if space exists
          try:
              space_info = api.space_info(repo_id=repo_id)
              print(f"Space exists: {repo_id}")
          except Exception as e:
              print(f"Creating new Space: {repo_id}")
              try:
                  create_repo(
                      token=token,
                      repo_id=repo_id,
                      repo_type="space",
                      space_sdk="docker",
                      private=False
                  )
                  print(f"Successfully created Space: {repo_id}")
                  # Wait for Space creation to complete
                  time.sleep(5)
              except Exception as create_error:
                  print(f"Note: Space creation error: {create_error}")
                  # Continue anyway - space might already exist
          
          # Upload all the files from the prepared directory
          path = Path("space_contents")
          files_to_upload = list(path.glob("**/*"))
          for file_path in files_to_upload:
              if file_path.is_file():
                  print(f"Uploading {file_path}")
                  relative_path = file_path.relative_to(path)
                  api.upload_file(
                      path_or_fileobj=str(file_path),
                      path_in_repo=str(relative_path),
                      repo_id=repo_id,
                      repo_type="space"
                  )
          
          # Set the HF token as a secret in the Space
          try:
              print(f"Setting HUGGINGFACE_API_TOKEN secret for {repo_id}")
              api.add_space_secret(repo_id=repo_id, key="HUGGINGFACE_API_TOKEN", value=token)
              print("Secret set successfully!")
          except Exception as e:
              print(f"Note: Error setting secret: {e}")
              # This might fail if the secret is already set
          
          # Setting Space variables for better visibility
          try:
              api.add_space_variable(repo_id=repo_id, key="DEPLOYMENT_TIMESTAMP", value=str(time.time()))
          except Exception as e:
              print(f"Could not set variable: {e}")
          
          print("Deployment complete!")
          EOF
